#! /bin/bash

WORKING_DIR="$HOME/.songs"
TARGET_PLAYER='mpv'
export PYTHONIOENCODING='utf-8'

if [ ! -d $WORKING_DIR ]; then
	mkdir $WORKING_DIR
fi

show_help(){
  echo -e "Usage: $(echo $0 | sed 's/\/.*\///g') [option] [argument]\n"
	echo "-p/--play <title> - search and play audio of the first YouTube search result for <title>."
	echo "-i/--info - view saved songs and the amount of space they take."
}

inv_par(){
	echo "invalid parameters. use the flag --help to get available parameters."
}

play_song(){
	arg="$@"
	echo "search: $arg"
	link="$(python3 `which ytcli` --query "$arg")"
        file=$(echo "$link" | sed 's/.*=//')
        info="$(python3 `which ytcli` --info "$link")"
        echo -e $info && echo
        info="`echo $info | head -1`"
        if [ -f "$WORKING_DIR/$file" ]; then
                mpv $WORKING_DIR/$file
        else
                echo -e "${info%%Uploader: *}\t|\t\033[0;32m$file" >> $HOME/.songs/saved
                youtube-dl -f 251 --audio-format "aac" -o - "$link" | tee "$file" | $TARGET_PLAYER -
        fi
}

cd $WORKING_DIR

case "$#" in
	"0")
		show_help
		;;

	"1")
		case "$1" in
			'-h'|'--help')
				show_help
			;;

			'-i'|'--info')
				cat $HOME/.songs/saved
				du -hs $WORKING_DIR
			;;
		esac
		;;

	"2")
		case "$1" in
			'-p'|'--play')
				play_song "$2"
			;;
		esac
		;;

	*)
		if [ "$1" = "-p" ] || [ "$1" = "--play" ]; then
			play_song "${@:2}"
		else
			inv_par
		fi
		;;
esac
